@model JobEngine.Web.Areas.PowerShellJobs.Models.PowerShellJobViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}

@section scripts
{

    <script src="~/Scripts/Ace-CodeEditor/ace.js"></script>

    <script type="text/javascript">

        document.addEventListener('DOMContentLoaded', function () {
            var wrapper = document.getElementById("OverwriteExistingDataWrapper");
            var selectList = document.getElementById("PSResultType");
            var selectedPSResultTYpe = selectList.options[selectList.selectedIndex].text;
            if (selectedPSResultTYpe == "Table")
                wrapper.style.display = 'block';
            else
                wrapper.style.display = 'none';

            var editor = ace.edit("editor");
            editor.setTheme("ace/theme/clouds");
            editor.getSession().setMode("ace/mode/powershell");

            $("form").submit(function () {
                $("#hidden_editor").val(editor.getSession().getValue());
            });

        });

        function ShowOverwriteDropDownList(item) {
            var wrapper = document.getElementById("OverwriteExistingDataWrapper");
            var selectedPSResultTYpe = item.options[item.selectedIndex].text;
            if (selectedPSResultTYpe == "Table")
                wrapper.style.display = 'block';
            else
                wrapper.style.display = 'none';

        }
    </script>
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>PowerShell Job</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.PowerShellJobId)
        @Html.HiddenFor(model => model.Script, new { @id = "hidden_editor" })

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <style type="text/css" media="screen">
                #editor {
                    position: relative;
                    height: 300px;
                    width: 700px;
                    border: 1px solid #ccc;
                }
            </style>

            <label class="control-label col-md-2" for="Script">Script</label>

            <div id="codeWrapper" class="col-md-10">
                <div id="editor">@Html.Raw(Model.Script)</div>
                @Html.ValidationMessageFor(model => model.Script, "", new { @class = "text-danger" })
            </div>
        </div>         
      

        @*<div class="form-group">
            @Html.LabelFor(model => model.Script, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Script, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Script, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.PSResultType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EnumDropDownListFor(model => model.PSResultType, new { @class = "form-control", @style = "max-width:150px;", @onchange = "ShowOverwriteDropDownList(this)" })
                    @Html.ValidationMessageFor(model => model.PSResultType, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group" id="OverwriteExistingDataWrapper" style="display:none">
            @Html.LabelFor(model => model.OverwriteExistingData, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OverwriteExistingData)
                @Html.ValidationMessageFor(model => model.OverwriteExistingData, "", new { @class = "text-danger" })

            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.DateModified, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateModified, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control", @style = "max-width:300px;" } })
                @Html.ValidationMessageFor(model => model.DateModified, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ModifiedBy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.ModifiedBy, new { @disabled = "disabled", @class = "form-control", @style = "max-width:300px;" })
                @Html.ValidationMessageFor(model => model.ModifiedBy, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateCreated, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateCreated, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control", @style = "max-width:300px;" } })
                @Html.ValidationMessageFor(model => model.DateCreated, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>

    <div>
        @Html.ActionLink("Back to List", "Index")
        <br />
        @Html.ActionLink("Add Parameters", "CreateParameter", new { id = Model.PowerShellJobId })
    </div>

    <hr />
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.LabelFor(m => m.Parameters.First().Name)
                </th>
                <th>
                    @Html.LabelFor(m => m.Parameters.First().DataType)
                </th>
                <th>
                    @Html.LabelFor(m => m.Parameters.First().IsRequired)
                </th>
                <th>
                    @Html.LabelFor(m => m.Parameters.First().IsEncrypted)
                </th>
                <th>
                    @Html.LabelFor(m => m.Parameters.First().InputValidationRegExPattern)
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Parameters != null)
            {
                foreach (var item in Model.Parameters)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(param => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(param => item.DataType)
                        </td>
                        <td>
                            @Html.DisplayFor(param => item.IsRequired)
                        </td>
                        <td>
                            @Html.DisplayFor(param => item.InputValidationRegExPattern)
                        </td>
                        <td>
                            @Html.DisplayFor(param => item.IsEncrypted)
                        </td>
                        <td>
                            @Html.DisplayFor(param => item.IsEncrypted)
                        </td>
                        <td>
                            @Html.ActionLink("Delete", "DeleteParameter", new { powerShellJobId = item.PowerShellJobId, powerShellJobParameterId = item.PowerShellJobParameterId })
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}


