@model JobEngine.Web.Areas.ScheduledJobs.Models.ScheduledPowerShellJobViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}

@section styles
{
    <link href="~/Content/jquery-cron.css" rel="stylesheet" />
    <style>
        #selector
        {
            max-width:480px;
        }
    </style>
}

@section scripts
{
    <script src="~/Scripts/jquery-cron-min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#selector').cron(); // apply cron with default options

            try {
                $('#selector').cron("value", '@Model.CronSchedule');
            } catch (e) {
                alert(e);
            }
            $("form").submit(function () {
                $("#hidden_cron_schedule").val($('#selector').cron("value"));
            });

        });
    </script>
    <!--- somewhere within <body> -->
}

@using (Html.BeginForm("EditPowerShellJob", "Home"))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.PowerShellJobId)
    @Html.HiddenFor(m => m.ScheduledJobId)
    @Html.HiddenFor(m => m.CronSchedule, new { @id = "hidden_cron_schedule" })
    <div class="form-horizontal">
        <h4>@Model.Name</h4>

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Customers, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedCustomerId, Model.Customers, new { @class = "form-control", @style = "max-width:300px;" })
                @Html.ValidationMessageFor(model => model.SelectedJobEngineClientId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JobEngineClients, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedJobEngineClientId, Model.JobEngineClients, new { @class = "form-control", @style = "max-width:300px;" })
                @Html.ValidationMessageFor(model => model.SelectedJobEngineClientId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CronSchedule, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div id='selector' class="form-control"></div>
                @*@Html.EditorFor(model => model.CronSchedule, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.CronSchedule, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>
        @for (int i = 0; i < Model.PowerShellJobParameters.Count(); i++)
        {
            <div class="form-group">
                @Html.HiddenFor(m => m.PowerShellJobParameters[i].Name)
                @Html.Label(Model.PowerShellJobParameters[i].Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (Model.PowerShellJobParameters[i].IsEncrypted)
                    {
                        @Html.PasswordFor(m => m.PowerShellJobParameters[i].Value, new { value = Model.PowerShellJobParameters[i].Value, @class = "form-control", @style = "max-width:300px" })
                    }
                    else
                    {
                        @Html.EditorFor(m => m.PowerShellJobParameters[i].Value, new { htmlAttributes = new { @class = "form-control" } })
                    }
                    @Html.ValidationMessage(Model.PowerShellJobParameters[i].Name, new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>
